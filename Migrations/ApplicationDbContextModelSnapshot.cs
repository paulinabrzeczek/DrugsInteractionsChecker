// <auto-generated />
using System;
using InterakcjeMiedzyLekami.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterakcjeMiedzyLekami.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.ActiveSubstance", b =>
                {
                    b.Property<int>("IdActiveSubstance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdActiveSubstance"), 1L, 1);

                    b.Property<string>("NameActiveSubstance")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdActiveSubstance")
                        .HasName("PK_Active_Substances");

                    b.ToTable("ActiveSubstances");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.ActiveSubstancesInteraction", b =>
                {
                    b.Property<int>("IdInteractionSubstance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInteractionSubstance"), 1L, 1);

                    b.Property<string>("DescriptionInteraction")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdActiveSubstance1")
                        .HasColumnType("int");

                    b.Property<int>("IdActiveSubstance2")
                        .HasColumnType("int");

                    b.Property<string>("TypeReaction")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdInteractionSubstance")
                        .HasName("PK_Active_Substance_Interactions ");

                    b.HasIndex("IdActiveSubstance1");

                    b.HasIndex("IdActiveSubstance2");

                    b.ToTable("ActiveSubstancesInteractions ", (string)null);
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.OtherSubstance", b =>
                {
                    b.Property<int>("IdSubstance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSubstance"), 1L, 1);

                    b.Property<string>("NameSubstance")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdSubstance")
                        .HasName("PK_Other_Substances");

                    b.ToTable("OtherSubstances");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.Pharmaceutical", b =>
                {
                    b.Property<int>("IdPharmaceutical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPharmaceutical"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NamePharmaceutical")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdPharmaceutical");

                    b.HasIndex("IdCategory");

                    b.ToTable("Pharmaceuticals");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.PharmaceuticalsActiveSubstance", b =>
                {
                    b.Property<int>("IdPharmaceutical")
                        .HasColumnType("int");

                    b.Property<int>("IdActiveSubstance")
                        .HasColumnType("int");

                    b.Property<double>("DoseSubstance")
                        .HasColumnType("float")
                        .HasComment("mg");

                    b.HasKey("IdPharmaceutical", "IdActiveSubstance")
                        .HasName("PK_Pharmaceuticals_Active_Substance _1");

                    b.HasIndex("IdActiveSubstance");

                    b.ToTable("PharmaceuticalsActiveSubstance ", (string)null);
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.PharmaceuticalsCategory", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"), 1L, 1);

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdCategory")
                        .HasName("PK_Pharmaceuticals_Categories");

                    b.ToTable("PharmaceuticalsCategories");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.PharmaceuticalsReview", b =>
                {
                    b.Property<int>("IdReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReview"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdPharmaceutical")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdReview")
                        .HasName("PK_Pharmacy_Reviews");

                    b.HasIndex("IdPharmaceutical");

                    b.ToTable("PharmaceuticalsReviews");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.PharmaceuticalsSubstanceInteraction", b =>
                {
                    b.Property<int>("IdInteraction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInteraction"), 1L, 1);

                    b.Property<string>("DescriptionInteraction")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdPharmaceutical")
                        .HasColumnType("int");

                    b.Property<int>("IdSubstance")
                        .HasColumnType("int");

                    b.Property<string>("TypeReaction")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdInteraction")
                        .HasName("PK_Pharmaceuticals_Substance_Interactions");

                    b.HasIndex("IdPharmaceutical");

                    b.HasIndex("IdSubstance");

                    b.ToTable("PharmaceuticalsSubstanceInteractions");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"), 1L, 1);

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdRole")
                        .HasName("PK_Role");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PharmaceuticalsReviewsUser", b =>
                {
                    b.Property<int>("IdReview")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdReview", "IdUser")
                        .HasName("PK_Pharmaceuticals_Reviews_Users_1");

                    b.HasIndex("IdUser");

                    b.ToTable("PharmaceuticalsReviewsUsers", (string)null);
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.ActiveSubstancesInteraction", b =>
                {
                    b.HasOne("InterakcjeMiedzyLekami.Models.ActiveSubstance", "IdActiveSubstance1Navigation")
                        .WithMany("ActiveSubstancesInteractionIdActiveSubstance1Navigations")
                        .HasForeignKey("IdActiveSubstance1")
                        .IsRequired()
                        .HasConstraintName("FK_ActiveSubstancesInteractions_ActiveSubstances1");

                    b.HasOne("InterakcjeMiedzyLekami.Models.ActiveSubstance", "IdActiveSubstance2Navigation")
                        .WithMany("ActiveSubstancesInteractionIdActiveSubstance2Navigations")
                        .HasForeignKey("IdActiveSubstance2")
                        .IsRequired()
                        .HasConstraintName("FK_ActiveSubstancesInteractions_ActiveSubstances2");

                    b.Navigation("IdActiveSubstance1Navigation");

                    b.Navigation("IdActiveSubstance2Navigation");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.Pharmaceutical", b =>
                {
                    b.HasOne("InterakcjeMiedzyLekami.Models.PharmaceuticalsCategory", "IdCategoryNavigation")
                        .WithMany("Pharmaceuticals")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmaceuticals_Pharmaceuticals_Categories");

                    b.Navigation("IdCategoryNavigation");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.PharmaceuticalsActiveSubstance", b =>
                {
                    b.HasOne("InterakcjeMiedzyLekami.Models.ActiveSubstance", "IdActiveSubstanceNavigation")
                        .WithMany("PharmaceuticalsActiveSubstances")
                        .HasForeignKey("IdActiveSubstance")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmaceuticals_Active_Substance_Active_Substances");

                    b.HasOne("InterakcjeMiedzyLekami.Models.Pharmaceutical", "IdPharmaceuticalNavigation")
                        .WithMany("PharmaceuticalsActiveSubstances")
                        .HasForeignKey("IdPharmaceutical")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmaceuticals_Active_Substance_Pharmaceuticals");

                    b.Navigation("IdActiveSubstanceNavigation");

                    b.Navigation("IdPharmaceuticalNavigation");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.PharmaceuticalsReview", b =>
                {
                    b.HasOne("InterakcjeMiedzyLekami.Models.Pharmaceutical", "IdPharmaceuticalNavigation")
                        .WithMany("PharmaceuticalsReviews")
                        .HasForeignKey("IdPharmaceutical")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmaceuticals_Reviews_Pharmaceuticals");

                    b.Navigation("IdPharmaceuticalNavigation");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.PharmaceuticalsSubstanceInteraction", b =>
                {
                    b.HasOne("InterakcjeMiedzyLekami.Models.Pharmaceutical", "IdPharmaceuticalNavigation")
                        .WithMany("PharmaceuticalsSubstanceInteractions")
                        .HasForeignKey("IdPharmaceutical")
                        .IsRequired()
                        .HasConstraintName("FK_PharmaceuticalsSubstanceInteractions_Pharmaceuticals");

                    b.HasOne("InterakcjeMiedzyLekami.Models.OtherSubstance", "IdSubstanceNavigation")
                        .WithMany("PharmaceuticalsSubstanceInteractions")
                        .HasForeignKey("IdSubstance")
                        .IsRequired()
                        .HasConstraintName("FK_PharmaceuticalsSubstanceInteractions_OtherSubstances");

                    b.Navigation("IdPharmaceuticalNavigation");

                    b.Navigation("IdSubstanceNavigation");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.User", b =>
                {
                    b.HasOne("InterakcjeMiedzyLekami.Models.Role", "IdRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Role");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("PharmaceuticalsReviewsUser", b =>
                {
                    b.HasOne("InterakcjeMiedzyLekami.Models.PharmaceuticalsReview", null)
                        .WithMany()
                        .HasForeignKey("IdReview")
                        .IsRequired()
                        .HasConstraintName("FK_PharmaceuticalsReviews_PharmaceuticalsReviewsUsers");

                    b.HasOne("InterakcjeMiedzyLekami.Models.User", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_User_Pharmaceuticals_Rieviews_Users");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.ActiveSubstance", b =>
                {
                    b.Navigation("ActiveSubstancesInteractionIdActiveSubstance1Navigations");

                    b.Navigation("ActiveSubstancesInteractionIdActiveSubstance2Navigations");

                    b.Navigation("PharmaceuticalsActiveSubstances");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.OtherSubstance", b =>
                {
                    b.Navigation("PharmaceuticalsSubstanceInteractions");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.Pharmaceutical", b =>
                {
                    b.Navigation("PharmaceuticalsActiveSubstances");

                    b.Navigation("PharmaceuticalsReviews");

                    b.Navigation("PharmaceuticalsSubstanceInteractions");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.PharmaceuticalsCategory", b =>
                {
                    b.Navigation("Pharmaceuticals");
                });

            modelBuilder.Entity("InterakcjeMiedzyLekami.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
